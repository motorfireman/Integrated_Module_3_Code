@{
    ViewData["Title"] = "Chat";
    ViewData["Heading"] = "Chat";
}

<!--**********************************
    Content body start
***********************************-->
<div class="content-body default-height">
    <!-- row -->
    <div class="container-fluid">
        <!-- row -->
        <div class="row">
            <div class="col-xl-3 col-lg-4">
                <div class="clearfix">
                    <div class="card card-bx profile-card author-profile m-b30">
                        <div class="card-body">
                            <div class="p-5">
                                <div class="author-profile">
                                    <div class="author-info">
                                        <h6 id="currentUser" class="title"></h6>
                                        <span>
                                            <div id="currentRole">
                                                
                                            </div>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div id="logged-in" class="d-none">
                                <br />
                                <div class="info-list">
                                    <div class="mb-3 px-3">
                                        <input type="text" id="searchInput" onkeyup="searchUserList()" class="form-control input-default " placeholder="Search...">
                                    </div>
                                    <label class="form-label" id="selectUserLabel" style="display: none;">Select a User to Chat With:</label>
                                    <ul id="chatList" class="list-group text-center"></ul>
                                </div>
                            </div>
                            <div id="not-logged-in" class="d-none">
                                <h3>You are not logged in.</h3>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            <div class="col-xl-9 col-lg-8" id="logged-in-right" style="display: none;">
                <div class="card card-bx profile-card author-profile m-b30">
                    <div class="card-header">
                        <h4 id="chattingUser" class="card-title">You're Chatting With: </h4>
                        <div class="dropdown ms-auto" id="dropdownMenu" style="display: none;">
                            <button class="btn btn-link" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                <svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><rect x="0" y="0" width="24" height="24"></rect><circle fill="#000000" cx="5" cy="12" r="2"></circle><circle fill="#000000" cx="12" cy="12" r="2"></circle><circle fill="#000000" cx="19" cy="12" r="2"></circle></g></svg>
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButton">
                                <li><a class="dropdown-item" id="delete-chat">Delete Chat</a></li>
                            </ul>
                        </div>
                    </div>

                    <div class="card-body">
                        <div class="row">
                            <ul id="messagesList" class="list-group"></ul>
                        </div>
                    </div>
                    <div class="card-footer">
                        <input id="messageInput" type="text" class="form-control" placeholder="Enter your message...">
                        <button class="btn btn-primary float-end" id="sendMessageButton">SEND MESSAGE</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!--**********************************
    Content body end
***********************************-->
@section mediqu_style
{
    <!-- Start Page Level CSS -->
    <style>
        .user-row.selected {
            background-color: #e0e0e0;
        }

        .list-group-item {
            display: flex;
            flex-direction: row;
            justify-content: flex-end;
            border: none !important;
        }

        .list-group-item .chat-bubble {
            background-color: #e3e3e3;
            padding: 10px 15px;
            border-radius: 20px;
            max-width: 50%;
            word-wrap: break-word;
            color: #000;
        }

        .list-group-item .chat-bubble-outgoing {
            background-color: #b8e994; 
            padding: 10px 15px;
            border-radius: 20px;
            max-width: 50%;
            word-wrap: break-word;
            color: #000;
        }

        .list-group {
            text-align: center;
        }

        .list-group-item.text-end .message-timestamp {
            color: #fff;
        }

        .list-group-item .message-timestamp {
            margin-left: 10px;
            font-size: 12px;
            color: #666;
        }
    </style>
    <!-- End Page Level CSS -->
}

@section mediqu_script
{
    <!--**********************************
        Scripts
    ***********************************-->
    <!-- SignalR CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>

    <!-- Swal CDN -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

    <!-- Required vendors -->
    <script src="~/mediqu/vendor/global/global.min.js"></script>

    <script src="~/mediqu/vendor/chart.js/Chart.bundle.min.js"></script>
    <!-- Apex Chart -->
    <script src="~/mediqu/vendor/apexchart/apexchart.js"></script>
    <script src="~/mediqu/vendor/bootstrap-select/dist/js/bootstrap-select.min.js"></script>
    <script src="~/mediqu/js/custom.min.js"></script>
    <script src="~/mediqu/js/deznav-init.js"></script>
    <script src="~/mediqu/js/module3/empty.js"></script>


    <script>
        document.addEventListener("DOMContentLoaded", function () {

            const loggedInContainer = document.querySelector("#logged-in");
            const loggedInRightContainer = document.querySelector("#logged-in-right");
            const notLoggedInContainer = document.querySelector("#not-logged-in");

            let connection = null;
            let currentUser = ''; // Holds the current logged-in username
            let currentUserId = ''; // Holds the current logged-in Id
            let currentRole = ''; // Holds the current logged-in user's role
            let recipientUsername = ''; // Holds the clicked user's username
            let recipientId = ''; // Holds the clicked user's id

            const checkLoginStatus = () => {
                fetch("/MockLogin/CheckLogin/")
                    .then(response => response.json())
                    .then(json => {
                        if (!json["logged_in"]) {
                            notLoggedInContainer.className = "mb-4";
                        } else {
                            loggedInContainer.className = "mb-4";
                            loggedInRightContainer.style.display = "block";
                        }
                    });
            }

            const getUserDetails = async () => {
                try {
                    const response = await fetch("/Chat/GetUserDetails/");
                    const json = await response.json();
                    console.log(json);
                    const { user, user_relationship } = json;
                    currentUser = user["name"];
                    currentUserId = user["id"];
                    sessionStorage.setItem('currentUserId', currentUserId);
                    currentRole = user["role"];
                    if (currentUser) {
                        document.getElementById('currentUser').textContent = currentUser;
                        document.getElementById('currentRole').textContent = currentRole;
                        if (Array.isArray(user_relationship)) {
                            updateChatList(currentUser, currentUserId, user_relationship);
                        } else {
                            updateChatList(currentUser, currentUserId, [user_relationship]);
                        }
                        startConnection(currentUserId);
                    }
                } catch (error) {
                    console.error("Error fetching user details:", error);
                }
            }

            checkLoginStatus();
            getUserDetails();

            // Function to update the user list with sorting and search functionality
            function updateChatList(currentUser, currentUserId, user_relationship) {
                const chatList = document.getElementById('chatList');
                chatList.innerHTML = ''; // Clear the chat list

                // Sort the user list alphabetically by name
                user_relationship.sort((a, b) => a.name.localeCompare(b.name));

                // Iterate over the sorted user_relationship array
                user_relationship.forEach(user => {
                    // Skip the current user
                    if (user.id !== currentUserId) {
                        const listItem = document.createElement('li');
                        listItem.textContent = user.name + ' (' + user.role + ')';
                        listItem.classList.add('user-row'); // Add class for styling and identification

                        // Set data attribute for username and recipient ID
                        listItem.setAttribute('data-username', user.name);
                        listItem.setAttribute('data-recipient-id', user.id);

                        // Create hidden input field to store current user's ID
                        const userIdInput = document.createElement('input');
                        userIdInput.type = 'hidden';
                        userIdInput.value = currentUserId;
                        userIdInput.name = 'currentUserId';
                        listItem.appendChild(userIdInput);

                        chatList.appendChild(listItem);

                        // Event listener for clicking on a user row
                        listItem.addEventListener('click', function () {
                            // Remove the 'selected' class from all user rows
                            document.querySelectorAll('.user-row').forEach(item => {
                                item.classList.remove('selected');
                            });
                            // Add 'selected' class to the clicked user row
                            listItem.classList.add('selected');
                            // Set the recipient username
                            recipientUsername = user.name;
                            document.getElementById('chattingUser').textContent = "You're Chatting With: " + recipientUsername;
                            document.getElementById('dropdownMenu').style.display = 'block'; // Show the dropdown menu

                            // Get the recipient ID from the clicked list item
                            recipientId = listItem.getAttribute('data-recipient-id');

                            // Retrieve messages for the selected user
                            retrieveMessages(currentUserId, recipientId);
                        });
                    }
                });

                // Re-add event listeners for user-row click
                addRowEventListeners(currentUserId);
            }

            // Function to add event listeners to user rows
            function addRowEventListeners(currentUserId) {
                document.querySelectorAll('.user-row').forEach(item => {
                    item.addEventListener('click', function () {
                        // Get the recipient ID from the clicked list item
                        recipientId = this.getAttribute('data-recipient-id');
                        // Set the recipientUsername from the clicked list item
                        recipientUsername = this.getAttribute('data-username');
                        document.getElementById('chattingUser').textContent = "You're Chatting With: " + recipientUsername;
                        // Retrieve messages for the selected user
                        retrieveMessages(currentUserId, recipientId);
                    });
                });
            }

            // Function to handle search functionality
            function handleSearch() {
                const searchInput = document.getElementById('searchInput');
                const searchTerm = searchInput.value.toLowerCase(); // Convert search term to lowercase

                // Hide all user rows initially
                document.querySelectorAll('.user-row').forEach(item => {
                    item.style.display = 'none';
                });

                // Show user rows that match the search term
                document.querySelectorAll('.user-row').forEach(item => {
                    const userName = item.getAttribute('data-username').toLowerCase();
                    if (userName.includes(searchTerm)) {
                        item.style.display = 'block';
                    }
                });
            }

            // Event listener for search input field
            document.getElementById('searchInput').addEventListener('input', handleSearch);


            // Function to handle search in user list
            function searchUserList() {
                const input = document.getElementById('searchInput').value.toUpperCase();
                const userList = document.getElementById('chatList');
                const userRows = userList.getElementsByClassName('user-row');

                for (let i = 0; i < userRows.length; i++) {
                    const username = userRows[i].getAttribute('data-username').toUpperCase();
                    if (username.indexOf(input) > -1) {
                        userRows[i].style.display = '';
                    } else {
                        userRows[i].style.display = 'none';
                    }
                }
            }

            document.getElementById('sendMessageButton').addEventListener('click', function () {
                const message = document.getElementById('messageInput').value;

                const loggedInUser = sessionStorage.getItem('currentUserId');

                // Check if currentUserId is available
                if (!currentUserId) {
                    console.error("currentUserId is not available.");
                    return; // Exit early if currentUserId is not available
                }

                // Use the recipientId from the higher scope
                if (message && recipientId !== null && recipientId !== undefined && recipientId !== '' && currentUserId) {
                    connection.invoke("SendMessageToHub", recipientId, message, loggedInUser)
                        .catch(function (err) {
                            console.error(err.toString());
                        });
                    document.getElementById('messageInput').value = ''; // Clear the message input field
                } else {
                    console.error("Error")
                }
            });

            function startConnection(username) {
                connection = new signalR.HubConnectionBuilder()
                    .withUrl("/chathub?username=" + username)
                    .build();
                // SignalR event handler for receiving messages
                connection.on("ReceiveMessage", function (sender, message) {
                    console.log(sender, message);
                    // Determine the alignment based on the sender
                    var alignmentClass = sender == "You" ? 'justify-content-end' : 'justify-content-start';
                    var bubbleClass = sender == "You" ? 'chat-bubble-outgoing' : 'chat-bubble';

                    // Display the received message
                    const messageItem = document.createElement("li");
                    messageItem.textContent = `${sender}: ${message}`;

                    // Construct the message HTML with proper alignment and formatting
                    var messageHTML = '<div class="list-group-item d-flex ' + alignmentClass + '">';
                    messageHTML += '<div class="' + bubbleClass + '">' + message + '</div>';
                    messageHTML += '<span class="message-timestamp">' + getCurrentTimestamp() + '</span>';
                    messageHTML += '</div>';

                    document.getElementById("messagesList").innerHTML += messageHTML;
                });

                // SignalR event handler for loading messages
                connection.on("LoadMessages", function (messages) {
                    // Clear the current message list
                    document.getElementById("messagesList").innerHTML = '';
                    // Display the loaded messages
                    messages.forEach(function (message) {
                        const messageItem = document.createElement("li");
                        messageItem.textContent = `${message.sender}: ${message.content}`;

                        // Determine the alignment based on the sender
                        var alignmentClass = message.content.includes('You') ? 'justify-content-end' : 'justify-content-start';
                        var bubbleClass = message.content.includes('You') ? 'chat-bubble-outgoing' : 'chat-bubble';

                        // Construct the message HTML with proper alignment and formatting
                        var messageHTML = '<div class="list-group-item d-flex ' + alignmentClass + '">';
                        var messageContent = message.content.split(':')[1].trim();
                        messageHTML += '<div class="' + bubbleClass + '">' + messageContent + '</div>';
                        messageHTML += '<span class="message-timestamp">' + formattedTimestamp + '</span>';
                        messageHTML += '</div>';

                        document.getElementById("messagesList").innerHTML += messageHTML;
                    });
                });

                connection.start().then(function () {
                    document.getElementById('sendMessageButton').disabled = false; // Enable the send button
                }).catch(function (err) {
                    return console.error(err.toString());
                });
            }

            function retrieveMessages(senderId, recipientId) {

                // Perform AJAX request to retrieve messages for the selected user
                $.ajax({
                    url: '/Chat/RetrieveMessages',
                    type: 'GET',
                    data: {
                        senderId: senderId,
                        recipientId: recipientId
                    },
                    success: function (response) {
                        console.log(response);
                        // 'response' contains the retrieved messages
                        var messagesList = $('#messagesList');
                        messagesList.empty(); // Clear the existing messages

                        // Iterate over the messages and format them with proper alignment
                        response.forEach(function (message) {
                            var formattedMessage = formatMessage(message);
                            messagesList.append(formattedMessage);
                        });
                    },
                    error: function (xhr, status, error) {
                        console.error('Error retrieving messages:', error);
                    }
                });
            }

            // Handle click on "Delete Chat" button
            document.getElementById('delete-chat').addEventListener('click', function () {
                Swal.fire({
                    title: 'Confirm Deletion',
                    text: 'Are you sure you want to delete this chat message?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Delete'
                }).then((result) => {
                    // Check if the user confirmed the deletion
                    if (result.isConfirmed) {
                        // Send a DELETE request to the controller action
                        $.ajax({
                            url: '/Chat/DeleteChatMessage',
                            type: 'DELETE',
                            data: { senderId: currentUserId, recipientId: recipientId },
                            success: function (response) {
                                Swal.fire('Deleted!', 'Your chat message has been deleted.', 'success');
                                window.location.reload();
                            },
                            error: function (xhr, status, error) {
                                Swal.fire('Error!', 'Failed to delete chat message.', 'error');
                            }
                        });
                    }
                });
            });
           

            function formatMessage(message) {
                // Format the timestamp to dd/mm/yyyy HH:mm 24-hour format
                var timestamp = new Date(message.timestamp);
                var formattedTimestamp = timestamp.toLocaleString('en-GB', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false
                });

                // Determine the alignment based on the sender
                var alignmentClass = message.message.includes('You') ? 'justify-content-end' : 'justify-content-start';
                var bubbleClass = message.message.includes('You') ? 'chat-bubble-outgoing' : 'chat-bubble';

                // Construct the message HTML with proper alignment and formatting
                var messageHTML = '<div class="list-group-item d-flex ' + alignmentClass + '">';
                var messageContent = message.message.split(':')[1].trim();
                messageHTML += '<div class="' + bubbleClass + '">' + messageContent + '</div>';
                messageHTML += '<span class="message-timestamp">' + formattedTimestamp + '</span>';
                messageHTML += '</div>';

                return messageHTML;
            }

            function getCurrentTimestamp() {
                var currentTimestamp = new Date();
                var formattedCurrentTimestamp = currentTimestamp.toLocaleString('en-GB', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false
                });

                return formattedCurrentTimestamp;
            }
        });
    </script>
}
